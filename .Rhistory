library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
library(spexvb)
remove.packages("spexvb")
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
unlink("C:\Users\POLEJUA\AppData\Local\R\win-library\4.3\spexvb", recursive = TRUE, force = TRUE)
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
unlink(package_path, recursive = TRUE, force = TRUE)
devtools::install() # T
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install()
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
load("../fit_spexvb_v6_setting_1_tau_b_1.RData")
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
library(spexvb)
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
<<<<<<< HEAD
library(spexvb)
remove.packages("spexvb")
# Specify the full path to the spexvb package folder
package_path <- "C:/Users/POLEJUA/AppData/Local/R/win-library/4.3/spexvb"
# Check if the directory exists before trying to delete
if (dir.exists(package_path)) {
# Use recursive = TRUE to delete content and force = TRUE for stubborn files
unlink(package_path, recursive = TRUE, force = TRUE)
if (!dir.exists(package_path)) {
message("Successfully removed the spexvb package folder.")
} else {
warning("Failed to remove the spexvb package folder using R's unlink. You may need to delete it manually or restart your computer.")
}
} else {
message("The spexvb package folder does not exist at the specified path.")
}
# Ensure all development tools are loaded
library(devtools)
library(Rcpp)
library(roxygen2)
# VERY IMPORTANT: Clean all generated files and compilation artifacts
# This specifically removes the RcppExports files and cleans up DLLs/objects
devtools::clean_dll() # This is better than manual deletion for robustness
# You can also manually check and delete if devtools::clean_dll() doesn't remove them:
file.remove("src/RcppExports.cpp")
file.remove("R/RcppExports.R")
unlink("src/*.o") # Remove object files
unlink("src/*.dll") # Remove DLLs (Windows)
# Regenerate RcppExports based on the clean C++ headers
compileAttributes()
roxygenise(clean=T)
devtools::install() # This command builds and installs your package
=======
>>>>>>> 687b6240d2f445f63493fcb11446db939790ef7c
cite(spexvb)
library(spexvb)
